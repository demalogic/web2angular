(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> <_sre.SRE_Pattern object at 0x7fb45138d970> is not JSON serializable"
p3
sS'layer'
p4
S'/Users/nihil/PycharmProjects/untitled/web2py/applications/ang2py/controllers/plugin_angular.py'
p5
sS'code'
p6
S"__author__ = 'nihil'\n\nfrom plugin_angular import jsoned, Message\nfrom operator import isSequenceType\nfrom itertools import chain, imap\nmmin = min\nmmax = max\n\nclass ValidatorSerializer:\n    def __init__(self, validators):\n\n        self._serializers = {}\n\n        for validator in validators:\n            validator_name = type(validator).__name__\n            validator_method = getattr(self,'serialize_%s' % validator_name,None)\n            if validator_method:\n                self._serializers.update(validator_method(validator, **self._serializers.get(validator_name,{})))\n\n    def serialize_IS_LENGTH(self, validator, minlength = 0, maxlength = 2**32):\n        return dict(\n            minlength = max(minlength, validator.minsize),\n            maxlength = min(maxlength, validator.maxsize),\n        )\n\n    def serialize_IS_INT_IN_RANGE(self,validator,min=0, max=2**32):\n        return dict(\n            min = mmax(min, validator.minimum),\n            max = mmin(max, validator.maximum),\n        )\n\n    def serialize_IS_NOT_EMPTY(self,validator, required=False):\n        return dict(required = True)\n\n    def serialize_IS_MATCH(self,validator,pattern = ''):\n        return dict(pattern=('(%s)|(%s)' % (validator.regex,pattern)) if pattern else validator.regex)\n\n    def serialize_IS_ALPHANMERIC(self,validator,pattern=''):\n        return self.serialize_IS_MATCH(validator, pattern)\n\n    def __call__(self):\n        return self._serializers\n\n@jsoned\ndef model():\n    if not request.args:\n        raise Message('you have to specify a model like by /%s/plugin_angular/model/<model_name>' % request.application)\n    if not request.args[0] in db:\n        raise Message('model %s not found on %s application' % (request.args[0],request.application))\n    model = db[request.args[0]]\n    return dict((field.name,dict(\n        name = field.label,\n        validators = ValidatorSerializer(field.requires if isSequenceType(field.requires) else [field.requires])(),\n        comment = field.comment,\n        readable = field.readable,\n        writable = field.writable,\n        type = field.type,\n        w2pwidget = field.widget,\n    )) for field in (\n        getattr(model,field)\n        for field in model.fields\n    ))\n\nresponse._vars=response._caller(model)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/nihil/PycharmProjects/untitled/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/Users/nihil/PycharmProjects/untitled/web2py/applications/ang2py/controllers/plugin_angular.py", line 64, in <module>\n  File "/Users/nihil/PycharmProjects/untitled/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "applications/ang2py/modules/plugin_angular.py", line 30, in x\n    raise e\nTypeError: <_sre.SRE_Pattern object at 0x7fb45138d970> is not JSON serializable\n'
p11
s.